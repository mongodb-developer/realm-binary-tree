{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeTraversable"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/binarytree\/treetraversable"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Describes behaviours any tree that should be traversable must implement"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeTraversable"}],"title":"TreeTraversable","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:10BinaryTree0B11TraversableP","modules":[{"name":"BinaryTree"}],"navigatorTitle":[{"kind":"identifier","text":"TreeTraversable"}]},"hierarchy":{"paths":[["doc:\/\/BinaryTree\/documentation\/BinaryTree"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapInOrder(tree:closure:)-3t9he","doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapPostOrder(tree:closure:)-96n1l","doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapPreOrder(tree:closure:)-5utrx"]},{"title":"Type Aliases","identifiers":["doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/T"]}],"references":{"doc://BinaryTree/documentation/BinaryTree/TreeTraversable/mapPreOrder(tree:closure:)-5utrx":{"defaultImplementations":1,"role":"symbol","title":"mapPreOrder(tree:closure:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapPreOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"tree"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RealmBinaryTree","preciseIdentifier":"c:@M@BinaryTree@objc(cs)RealmBinaryTree"},{"kind":"text","text":", "},{"kind":"externalParam","text":"closure"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:10BinaryTree0B11TraversableP1Ta"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Algorithm Preorder(tree)"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapPreOrder(tree:closure:)-5utrx","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/binarytree\/treetraversable\/mappreorder(tree:closure:)-5utrx"},"doc://BinaryTree/documentation/BinaryTree":{"role":"collection","title":"BinaryTree","abstract":[{"type":"text","text":"This is a simple implementation of a BinaryTree that can be stored using Realm."}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree","kind":"symbol","type":"topic","url":"\/documentation\/binarytree"},"doc://BinaryTree/documentation/BinaryTree/TreeTraversable/mapPostOrder(tree:closure:)-96n1l":{"defaultImplementations":1,"role":"symbol","title":"mapPostOrder(tree:closure:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapPostOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"tree"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RealmBinaryTree","preciseIdentifier":"c:@M@BinaryTree@objc(cs)RealmBinaryTree"},{"kind":"text","text":", "},{"kind":"externalParam","text":"closure"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:10BinaryTree0B11TraversableP1Ta"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Algorithm Postorder(tree)"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapPostOrder(tree:closure:)-96n1l","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/binarytree\/treetraversable\/mappostorder(tree:closure:)-96n1l"},"doc://BinaryTree/documentation/BinaryTree/TreeTraversable/T":{"role":"symbol","title":"TreeTraversable.T","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"T"}],"abstract":[],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/T","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"T"}],"url":"\/documentation\/binarytree\/treetraversable\/t"},"doc://BinaryTree/documentation/BinaryTree/RealmBinaryTree/children":{"role":"symbol","title":"children","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"children"},{"kind":"text","text":": (left"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RealmBinaryTree","preciseIdentifier":"c:@M@BinaryTree@objc(cs)RealmBinaryTree"},{"kind":"text","text":"?, right"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RealmBinaryTree","preciseIdentifier":"c:@M@BinaryTree@objc(cs)RealmBinaryTree"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Both "},{"type":"reference","isActive":true,"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree\/leftChild"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree\/rightChild"},{"type":"text","text":" children of this subtree"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree\/children","kind":"symbol","type":"topic","url":"\/documentation\/binarytree\/realmbinarytree\/children"},"doc://BinaryTree/documentation/BinaryTree/RealmBinaryTree":{"role":"symbol","title":"RealmBinaryTree","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RealmBinaryTree"}],"abstract":[{"type":"text","text":"A Binary Tree has a Root node and at most two children (they can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to get both children nodes access "},{"type":"reference","isActive":true,"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree\/children"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/RealmBinaryTree","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RealmBinaryTree"}],"url":"\/documentation\/binarytree\/realmbinarytree"},"doc://BinaryTree/documentation/BinaryTree/TreeTraversable/mapInOrder(tree:closure:)-3t9he":{"defaultImplementations":1,"role":"symbol","title":"mapInOrder(tree:closure:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapInOrder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"tree"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RealmBinaryTree","preciseIdentifier":"c:@M@BinaryTree@objc(cs)RealmBinaryTree"},{"kind":"text","text":", "},{"kind":"externalParam","text":"closure"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:10BinaryTree0B11TraversableP1Ta"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Algorithm Inorder(tree)"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable\/mapInOrder(tree:closure:)-3t9he","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/binarytree\/treetraversable\/mapinorder(tree:closure:)-3t9he"},"doc://BinaryTree/documentation/BinaryTree/TreeTraversable":{"role":"symbol","title":"TreeTraversable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeTraversable"}],"abstract":[{"type":"text","text":"Describes behaviours any tree that should be traversable must implement"}],"identifier":"doc:\/\/BinaryTree\/documentation\/BinaryTree\/TreeTraversable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeTraversable"}],"url":"\/documentation\/binarytree\/treetraversable"}}}